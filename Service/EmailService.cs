using Microsoft.VisualBasic;
using System.Text.RegularExpressions;
using testEmailModule.Utils;
using static System.Net.WebRequestMethods;

namespace testEmailModule.Service
{
    public class EmailService : IEmailService
    {
        /* 
         *  @func generate_OTP_email sends a new 6 digit random OTP code to the given email address 
         *  input by the users. Only emails from the ".dso.org.sg" domain should be allowed to receive an OTP code.
        */
        public async Task<(EmailEnum, string)> generate_OTP_email(string? email)
        {
            if (string.IsNullOrEmpty(email))
            {
                //  STATUS_EMAIL_FAIL: email address does not exist or sending to the email has failed.
                return (EmailEnum.STATUS_EMAIL_FAIL, string.Empty);
            }

            if (ValidateEmail(email))
            {
                var random = new Random();
                var randomOTPString = random.Next(0, 999999).ToString("D6");

                var email_body = $"You OTP Code is {randomOTPString}. The code is valid for 1 minute";

               // STATUS_EMAIL_OK: email containing OTP has been sent successfully.
                return await send_email(email, email_body);
            }
            else 
            {
                // STATUS_EMAIL_INVALID: email address is invalid.
                return (EmailEnum.STATUS_EMAIL_INVALID, string.Empty);
            }
        }

        /*
         *  @func check_OTP reads the input stream for user input of the OTP. The OTP to match is the current OTP generated by a send
         *  allows user 10 tries to enter the valid OTP. check_OTP should return after 1min if the user does not give a valid OTP. 
        */
        public async Task<EmailEnum> check_OTP(StreamReader input, string generatedOTP)
        {
            int attempts = 0;
            string enteredOTP = string.Empty;
            DateTime startTime = DateTime.Now;

            while (attempts < 10)
            {
                TimeSpan elapsedTime = DateTime.Now - startTime;
                TimeSpan remainingTime = TimeSpan.FromMinutes(1) - elapsedTime;

                var readTask = Task.Run(() => ReadOTPWithTimeoutAsync(input, remainingTime));
                bool inputReceived = await Task.WhenAny(readTask, Task.Delay(remainingTime)) == readTask;

                if (!inputReceived)
                {
                    return EmailEnum.STATUS_OTP_TIMEOUT;
                }

                enteredOTP = readTask.Result;
                if (enteredOTP == generatedOTP)
                {
                    return EmailEnum.STATUS_OTP_OK;
                }

                attempts++;
            }

            return EmailEnum.STATUS_OTP_FAIL; // Exceeded maximum attempts
        }

        private bool ValidateEmail(string email)
        {
            return email.EndsWith(".dso.org.sg", StringComparison.Ordinal);
        }

        private async Task<string> ReadOTPWithTimeoutAsync(StreamReader input, TimeSpan timeout)
        {
            string otp = string.Empty;
            try
            {
                var readTask = input.ReadLineAsync();
                if (readTask != await Task.WhenAny(readTask, Task.Delay(timeout)))
                {
                    throw new TimeoutException("OTP input timed out");
                }
                otp = await readTask; // Get the OTP input from the readTask
            }
            catch (IOException)
            {
                throw new Exception("ReadOTPWithTimeoutAsync has hit an error");
            }
            return otp;
        }

        // You can assume a function send_email(email_address, email_body) is implemented.
        private async Task<(EmailEnum, string)> send_email(string email_address, string email_body)
        {
            /*
             * placeholder for logic for sending email_body to the specified email
             * assuming send_email fails, we can also return STATUS_EMAIL_FAIL here, but for simplicity sake, we will assume send_email is successful
             * 
             * STATUS_EMAIL_FAIL: email address does not exist or sending to the email has failed.
             */
            return (EmailEnum.STATUS_EMAIL_OK, email_body);
        }
    }
}
