using Microsoft.VisualBasic;
using System.Text.RegularExpressions;
using testEmailModule.Utils;
using static System.Net.WebRequestMethods;

namespace testEmailModule.Service
{
    public class EmailService : IEmailService
    {
        public int numberOfTries = 0;

        /* 
         *  @func generate_OTP_email sends a new 6 digit random OTP code to the given email address 
         *  input by the users. Only emails from the ".dso.org.sg" domain should be allowed to receive an OTP code.
        */
        public async Task<(EmailEnum, string)> generate_OTP_email(string? email)
        {
            if (string.IsNullOrEmpty(email))
            {
                //  STATUS_EMAIL_FAIL: email address does not exist or sending to the email has failed.
                return (EmailEnum.STATUS_EMAIL_FAIL, string.Empty);
            }

            if (ValidateEmail(email))
            {
                var random = new Random();
                var randomOTPString = random.Next(0, 999999).ToString("D6");

                var email_body = $"You OTP Code is {randomOTPString}. The code is valid for 1 minute";

               // STATUS_EMAIL_OK: email containing OTP has been sent successfully.
                return await send_email(email, email_body);
            }
            else 
            {
                // STATUS_EMAIL_INVALID: email address is invalid.
                return (EmailEnum.STATUS_EMAIL_INVALID, string.Empty);
            }
        }

        /*
         *  @func check_OTP reads the input stream for user input of the OTP. The OTP to match is the current OTP generated by a send
         *  allows user 10 tries to enter the valid OTP. check_OTP should return after 1min if the user does not give a valid OTP. 
        */
        public async Task<(EmailEnum, string)> check_OTP(Stream input, bool retry = false, string? OTPInputFromUser = null)
        {
            // STATUS_OTP_FAIL: OTP is wrong after 10 tries
            if (numberOfTries >= 10) return (EmailEnum.STATUS_OTP_FAIL, EmailEnum.STATUS_OTP_FAIL.ToString());

            // simulate the retry count of 10
            if (retry is true) 
            {
                numberOfTries +=10;
            }

            using (var inputStream = new StreamReader(input))
            {
                // Read OTP from the input stream
                string OTPFromStream = await inputStream.ReadLineAsync();

                // to simulate the entered OTP is the same as the input from the user, we set OTPFromStream = OTPInputFromUser
                // to simulate OTP from stream is not the same, we set OTPInput to be different from the OTPFromStream
                OTPFromStream = OTPInputFromUser ?? "000000";
                if (OTPInputFromUser is null) OTPInputFromUser = "111111";

                // input.readOTP() which waits and returns the 6 digit entered by the user
                var OTPReadFromStreamTask = Task.Run(() => readOTP(OTPFromStream));
                var timeoutTask = Task.Delay(TimeSpan.FromMinutes(1));

                // Wait for either the OTP generation task to complete, or a timeout of 1 minute
                var OTPtimeoutOrRetrievedTask = await Task.WhenAny(OTPReadFromStreamTask, timeoutTask);

                // if the readOTP completes first, do this
                if (OTPtimeoutOrRetrievedTask == OTPReadFromStreamTask)
                {
                    if (OTPInputFromUser == OTPReadFromStreamTask.Result)
                    {
                        return (EmailEnum.STATUS_OTP_OK, EmailEnum.STATUS_OTP_OK.ToString()); 
                    }
                }

                // if readOTP output is not the same as the input that the user provided, do this
                if (OTPInputFromUser != OTPReadFromStreamTask.Result && OTPtimeoutOrRetrievedTask != timeoutTask)
                {
                    return (EmailEnum.STATUS_OTP_FAIL, EmailEnum.STATUS_OTP_FAIL.ToString());
                }

                // if readOTP hits timeout, do this
                return (EmailEnum.STATUS_OTP_TIMEOUT, EmailEnum.STATUS_OTP_TIMEOUT.ToString()); // Timeout occurred
            }
        }

        private bool ValidateEmail(string email)
        {
            return email.EndsWith(".dso.org.sg", StringComparison.Ordinal);
        }

        private async Task<string> readOTP(string input)
        {
            // to simulate waiting, you can change this to TimeSpan.FromSeconds(61) to test fail flow
            await Task.Delay(1000);
            //await Task.Delay(TimeSpan.FromSeconds(61));
            return input;
        }

        // You can assume a function send_email(email_address, email_body) is implemented.
        private async Task<(EmailEnum, string)> send_email(string email_address, string email_body)
        {
            /*
             * placeholder for logic for sending email_body to the specified email
             * assuming send_email fails, we can also return STATUS_EMAIL_FAIL here, but for simplicity sake, we will assume send_email is successful
             * 
             * STATUS_EMAIL_FAIL: email address does not exist or sending to the email has failed.
             */
            return (EmailEnum.STATUS_EMAIL_OK, email_body);
        }
    }
}
